const e=JSON.parse('{"key":"v-201fb7e8","path":"/java/concurrent/java-thread-pool-summary.html","title":"Java 线程池详解","lang":"zh-CN","frontmatter":{"title":"Java 线程池详解","category":["Java"],"tag":["Java并发"],"description":"1 使用线程池的好处 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 线程池提供了一种限制和管理资源（包括执行一个任务）的方式。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。 这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处： 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/java/concurrent/java-thread-pool-summary.html"}],["meta",{"property":"og:site_name","content":"JavaGuide(Java面试+学习指南)"}],["meta",{"property":"og:title","content":"Java 线程池详解"}],["meta",{"property":"og:description","content":"1 使用线程池的好处 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 线程池提供了一种限制和管理资源（包括执行一个任务）的方式。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。 这里借用《Java 并发编程的艺术》提到的来说一下使用线程池的好处： 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javaguide.cn/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java 线程池详解"}],["meta",{"property":"article:tag","content":"Java并发"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 线程池详解\\",\\"image\\":[\\"https://javaguide.cn/\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 使用线程池的好处","slug":"_1-使用线程池的好处","link":"#_1-使用线程池的好处","children":[]},{"level":2,"title":"2 Executor 框架","slug":"_2-executor-框架","link":"#_2-executor-框架","children":[{"level":3,"title":"2.1 简介","slug":"_2-1-简介","link":"#_2-1-简介","children":[]},{"level":3,"title":"2.2 Executor 框架结构(主要由三大部分组成)","slug":"_2-2-executor-框架结构-主要由三大部分组成","link":"#_2-2-executor-框架结构-主要由三大部分组成","children":[]},{"level":3,"title":"2.3 Executor 框架的使用示意图","slug":"_2-3-executor-框架的使用示意图","link":"#_2-3-executor-框架的使用示意图","children":[]}]},{"level":2,"title":"3 (重要)ThreadPoolExecutor 类简单介绍","slug":"_3-重要-threadpoolexecutor-类简单介绍","link":"#_3-重要-threadpoolexecutor-类简单介绍","children":[{"level":3,"title":"3.1 ThreadPoolExecutor 类分析","slug":"_3-1-threadpoolexecutor-类分析","link":"#_3-1-threadpoolexecutor-类分析","children":[]},{"level":3,"title":"3.2 推荐使用 ThreadPoolExecutor 构造函数创建线程池","slug":"_3-2-推荐使用-threadpoolexecutor-构造函数创建线程池","link":"#_3-2-推荐使用-threadpoolexecutor-构造函数创建线程池","children":[]}]},{"level":2,"title":"4 ThreadPoolExecutor 使用+原理分析","slug":"_4-threadpoolexecutor-使用-原理分析","link":"#_4-threadpoolexecutor-使用-原理分析","children":[{"level":3,"title":"4.1 示例代码:Runnable+ThreadPoolExecutor","slug":"_4-1-示例代码-runnable-threadpoolexecutor","link":"#_4-1-示例代码-runnable-threadpoolexecutor","children":[]},{"level":3,"title":"4.2 线程池原理分析","slug":"_4-2-线程池原理分析","link":"#_4-2-线程池原理分析","children":[]},{"level":3,"title":"4.3 几个常见的对比","slug":"_4-3-几个常见的对比","link":"#_4-3-几个常见的对比","children":[]},{"level":3,"title":"4.4 加餐:Callable+ThreadPoolExecutor示例代码","slug":"_4-4-加餐-callable-threadpoolexecutor示例代码","link":"#_4-4-加餐-callable-threadpoolexecutor示例代码","children":[]}]},{"level":2,"title":"5 几种常见的线程池详解","slug":"_5-几种常见的线程池详解","link":"#_5-几种常见的线程池详解","children":[{"level":3,"title":"5.1 FixedThreadPool","slug":"_5-1-fixedthreadpool","link":"#_5-1-fixedthreadpool","children":[]},{"level":3,"title":"5.2 SingleThreadExecutor 详解","slug":"_5-2-singlethreadexecutor-详解","link":"#_5-2-singlethreadexecutor-详解","children":[]},{"level":3,"title":"5.3 CachedThreadPool 详解","slug":"_5-3-cachedthreadpool-详解","link":"#_5-3-cachedthreadpool-详解","children":[]}]},{"level":2,"title":"6 ScheduledThreadPoolExecutor 详解","slug":"_6-scheduledthreadpoolexecutor-详解","link":"#_6-scheduledthreadpoolexecutor-详解","children":[{"level":3,"title":"6.1 简介","slug":"_6-1-简介","link":"#_6-1-简介","children":[]},{"level":3,"title":"6.2 运行机制","slug":"_6-2-运行机制","link":"#_6-2-运行机制","children":[]},{"level":3,"title":"6.3 ScheduledThreadPoolExecutor 执行周期任务的步骤","slug":"_6-3-scheduledthreadpoolexecutor-执行周期任务的步骤","link":"#_6-3-scheduledthreadpoolexecutor-执行周期任务的步骤","children":[]}]},{"level":2,"title":"7 线程池大小确定","slug":"_7-线程池大小确定","link":"#_7-线程池大小确定","children":[]},{"level":2,"title":"8 参考","slug":"_8-参考","link":"#_8-参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":29.64,"words":8892},"filePathRelative":"java/concurrent/java-thread-pool-summary.md","excerpt":"<h2> 1 使用线程池的好处</h2>\\n<p>池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p>\\n<p><strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）的方式。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p>\\n<p>这里借用《Java 并发编程的艺术》提到的来说一下<strong>使用线程池的好处</strong>：</p>\\n<ul>\\n<li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\\n<li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\\n<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\\n</ul>","copyright":{},"autoDesc":true}');export{e as data};
