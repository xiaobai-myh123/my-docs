import{_ as l}from"./2008410143049281-dcaba02a.js";import{_ as d,W as h,X as c,Y as t,Z as e,$ as o,a0 as n,a1 as s,F as a}from"./framework-b5ed7090.js";const T={},P=t("h2",{id:"计算机网络基础",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#计算机网络基础","aria-hidden":"true"},"#"),e(" 计算机网络基础")],-1),p=t("h3",{id:"osi-和-tcp-ip-网络分层模型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#osi-和-tcp-ip-网络分层模型","aria-hidden":"true"},"#"),e(" OSI 和 TCP/IP 网络分层模型")],-1),u=t("p",null,[t("strong",null,"相关面试题"),e(" ：")],-1),g=t("ul",null,[t("li",null,"OSI 七层模型是什么？每一层的作用是什么？"),t("li",null,"TCP/IP 四层模型是什么？每一层的作用是什么？"),t("li",null,"为什么网络要分层？")],-1),_=t("strong",null,"参考答案",-1),C=t("h3",{id:"应用层有哪些常见的协议",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#应用层有哪些常见的协议","aria-hidden":"true"},"#"),e(" 应用层有哪些常见的协议？")],-1),H=s('<h2 id="tcp-与-udp" tabindex="-1"><a class="header-anchor" href="#tcp-与-udp" aria-hidden="true">#</a> TCP 与 UDP</h2><h3 id="tcp-与-udp-的区别-重要" tabindex="-1"><a class="header-anchor" href="#tcp-与-udp-的区别-重要" aria-hidden="true">#</a> TCP 与 UDP 的区别（重要）</h3><ol><li><strong>是否面向连接</strong> ：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li><li><strong>是否是可靠传输</strong>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。</li><li><strong>是否有状态</strong> ：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（<strong>这很渣男！</strong>）。</li><li><strong>传输效率</strong> ：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。</li><li><strong>传输形式</strong> ： TCP 是面向字节流的，UDP 是面向报文的。</li><li><strong>首部开销</strong> ：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。</li><li><strong>是否提供广播或多播服务</strong> ：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li><li>......</li></ol><p>我把上面总结的内容通过表格形式展示出来了！确定不点个赞嘛？</p><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>是否面向连接</td><td>是</td><td>否</td></tr><tr><td>是否可靠</td><td>是</td><td>否</td></tr><tr><td>是否有状态</td><td>是</td><td>否</td></tr><tr><td>传输效率</td><td>较慢</td><td>较快</td></tr><tr><td>传输形式</td><td>字节流</td><td>数据报文段</td></tr><tr><td>首部开销</td><td>20 ～ 60 bytes</td><td>8 bytes</td></tr><tr><td>是否提供广播或多播服务</td><td>否</td><td>是</td></tr></tbody></table><h3 id="什么时候选择-tcp-什么时候选-udp" tabindex="-1"><a class="header-anchor" href="#什么时候选择-tcp-什么时候选-udp" aria-hidden="true">#</a> 什么时候选择 TCP,什么时候选 UDP?</h3><ul><li><strong>UDP 一般用于即时通信</strong>，比如： 语音、 视频 、直播等等。这些场景对传输数据的准确性要求不是特别高，比如你看视频即使少个一两帧，实际给人的感觉区别也不大。</li><li><strong>TCP 用于对传输准确性要求特别高的场景</strong>，比如文件传输、发送和接收邮件、远程登录等等。</li></ul><h3 id="http-基于-tcp-还是-udp" tabindex="-1"><a class="header-anchor" href="#http-基于-tcp-还是-udp" aria-hidden="true">#</a> HTTP 基于 TCP 还是 UDP？</h3><p><strong>HTTP 协议是基于 TCP 协议的</strong>，所以发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。</p><h3 id="使用-tcp-的协议有哪些-使用-udp-的协议有哪些" tabindex="-1"><a class="header-anchor" href="#使用-tcp-的协议有哪些-使用-udp-的协议有哪些" aria-hidden="true">#</a> 使用 TCP 的协议有哪些?使用 UDP 的协议有哪些?</h3><p><strong>运行于 TCP 协议之上的协议</strong> ：</p><ol><li><strong>HTTP 协议</strong> ：超文本传输协议（HTTP，HyperText Transfer Protocol)主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li><li><strong>HTTPS 协议</strong> ：更安全的超文本传输协议(HTTPS,Hypertext Transfer Protocol Secure)，身披 SSL 外衣的 HTTP 协议</li><li><strong>FTP 协议</strong>：文件传输协议 FTP（File Transfer Protocol），提供文件传输服务，<strong>基于 TCP</strong> 实现可靠的传输。使用 FTP 传输文件的好处是可以屏蔽操作系统和文件存储方式。</li><li><strong>SMTP 协议</strong>：简单邮件传输协议（SMTP，Simple Mail Transfer Protocol）的缩写，<strong>基于 TCP 协议</strong>，用来发送电子邮件。注意 ⚠️：接受邮件的协议不是 SMTP 而是 POP3 协议。</li><li><strong>POP3/IMAP 协议</strong>： POP3 和 IMAP 两者都是负责邮件接收的协议。</li><li><strong>Telent 协议</strong>：远程登陆协议，通过一个终端登陆到其他服务器。被一种称为 SSH 的非常安全的协议所取代。</li><li><strong>SSH 协议</strong> : SSH（ Secure Shell）是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH 建立在可靠的传输协议 TCP 之上。</li><li>......</li></ol><p><strong>运行于 UDP 协议之上的协议</strong> ：</p><ol><li><strong>DHCP 协议</strong>：动态主机配置协议，动态配置 IP 地址</li><li><strong>DNS</strong> ： <strong>域名系统（DNS，Domain Name System）将人类可读的域名 (例如，www.baidu.com) 转换为机器可读的 IP 地址 (例如，220.181.38.148)。</strong> 我们可以将其理解为专为互联网设计的电话薄。实际上 DNS 同时支持 UDP 和 TCP 协议。</li></ol><h3 id="tcp-三次握手和四次挥手-非常重要" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手和四次挥手-非常重要" aria-hidden="true">#</a> TCP 三次握手和四次挥手（非常重要）</h3><p><strong>相关面试题</strong> ：</p><ul><li>为什么要三次握手?</li><li>第 2 次握手传回了ACK，为什么还要传回SYN？</li><li>为什么要四次挥手？</li><li>为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</li><li>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？</li><li>为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</li></ul>',17),S=t("strong",null,"参考答案",-1),f=t("h3",{id:"tcp-如何保证传输的可靠性-重要",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#tcp-如何保证传输的可靠性-重要","aria-hidden":"true"},"#"),e(" TCP 如何保证传输的可靠性？（重要）")],-1),b=s('<h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h2><h3 id="从输入url-到页面展示到底发生了什么-非常重要" tabindex="-1"><a class="header-anchor" href="#从输入url-到页面展示到底发生了什么-非常重要" aria-hidden="true">#</a> 从输入URL 到页面展示到底发生了什么？（非常重要）</h3><blockquote><p>类似的问题：打开一个网页，整个过程会使用哪些协议？</p></blockquote><p>图解（图片来源：《图解 HTTP》）：</p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/url输入到展示出来的过程.jpg" style="zoom:50%;"><blockquote><p>上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议</p></blockquote><p>总体来说分为以下几个过程:</p><ol><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><p>具体可以参考下面这两篇文章：</p>',9),m={href:"https://segmentfault.com/a/1190000006879700",target:"_blank",rel:"noopener noreferrer"},I={href:"https://cloud.tencent.com/developer/article/1879758",target:"_blank",rel:"noopener noreferrer"},U=t("h3",{id:"http-状态码有哪些",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#http-状态码有哪些","aria-hidden":"true"},"#"),e(" HTTP 状态码有哪些？")],-1),x=t("p",null,"HTTP 状态码用于描述 HTTP 请求的结果，比如2xx 就代表请求被成功处理。",-1),A=t("p",null,[t("img",{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019/7/状态码.png",alt:"HTTP 状态码"})],-1),M=s('<h3 id="http-和-https-有什么区别-重要" tabindex="-1"><a class="header-anchor" href="#http-和-https-有什么区别-重要" aria-hidden="true">#</a> HTTP 和 HTTPS 有什么区别？（重要）</h3><ul><li><strong>端口号</strong> ：HTTP 默认是 80，HTTPS 默认是 443。</li><li><strong>URL 前缀</strong> ：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li><li><strong>安全性和资源消耗</strong> ： HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li></ul>',2),R=s('<h3 id="http-1-0-和-http-1-1-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-1-0-和-http-1-1-有什么区别" aria-hidden="true">#</a> HTTP 1.0 和 HTTP 1.1 有什么区别？</h3><ul><li><strong>连接方式</strong> : HTTP 1.0 为短连接，HTTP 1.1 支持长连接。</li><li><strong>状态响应码</strong> : HTTP/1.1中新加入了大量的状态码，光是错误响应状态码就新增了24种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</li><li><strong>缓存处理</strong> : 在 HTTP1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong> :HTTP1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>Host头处理</strong> : HTTP/1.1在请求头中加入了<code>Host</code>字段。</li></ul>',2),k=s('<h3 id="http-是不保存状态的协议-如何保存用户状态" tabindex="-1"><a class="header-anchor" href="#http-是不保存状态的协议-如何保存用户状态" aria-hidden="true">#</a> HTTP 是不保存状态的协议, 如何保存用户状态?</h3><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个 Session）。</p><p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库 redis 保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。</p><p><strong>Cookie 被禁用怎么办?</strong></p><p>最常用的就是利用 URL 重写把 Session ID 直接附加在 URL 路径的后面。</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/HTTP是无状态的.png" alt="HTTP是无状态协议"></p><h3 id="uri-和-url-的区别是什么" tabindex="-1"><a class="header-anchor" href="#uri-和-url-的区别是什么" aria-hidden="true">#</a> URI 和 URL 的区别是什么?</h3><ul><li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li><li>URL(Uniform Resource Locator) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><p>URI 的作用像身份证号一样，URL 的作用更像家庭住址一样。URL 是一种具体的 URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p><h2 id="arp" tabindex="-1"><a class="header-anchor" href="#arp" aria-hidden="true">#</a> ARP</h2><h3 id="什么是-mac-地址" tabindex="-1"><a class="header-anchor" href="#什么是-mac-地址" aria-hidden="true">#</a> 什么是 Mac 地址？</h3><p>MAC 地址的全称是 <strong>媒体访问控制地址（Media Access Control Address）</strong>。如果说，互联网中每一个资源都由 IP 地址唯一标识（IP 协议内容），那么一切网络设备都由 MAC 地址唯一标识。</p><p><img src="'+l+'" alt="路由器的背面就会注明 MAC 位址"></p><p>可以理解为，MAC 地址是一个网络设备真正的身份证号，IP 地址只是一种不重复的定位方式（比如说住在某省某市某街道的张三，这种逻辑定位是 IP 地址，他的身份证号才是他的 MAC 地址），也可以理解为 MAC 地址是身份证号，IP 地址是邮政地址。MAC 地址也有一些别称，如 LAN 地址、物理地址、以太网地址等。</p><blockquote><p>还有一点要知道的是，不仅仅是网络资源才有 IP 地址，网络设备也有 IP 地址，比如路由器。但从结构上说，路由器等网络设备的作用是组成一个网络，而且通常是内网，所以它们使用的 IP 地址通常是内网 IP，内网的设备在与内网以外的设备进行通信时，需要用到 NAT 协议。</p></blockquote><p>MAC 地址的长度为 6 字节（48 比特），地址空间大小有 280 万亿之多（$2^{48}$），MAC 地址由 IEEE 统一管理与分配，理论上，一个网络设备中的网卡上的 MAC 地址是永久的。不同的网卡生产商从 IEEE 那里购买自己的 MAC 地址空间（MAC 的前 24 比特），也就是前 24 比特由 IEEE 统一管理，保证不会重复。而后 24 比特，由各家生产商自己管理，同样保证生产的两块网卡的 MAC 地址不会重复。</p><p>MAC 地址具有可携带性、永久性，身份证号永久地标识一个人的身份，不论他到哪里都不会改变。而 IP 地址不具有这些性质，当一台设备更换了网络，它的 IP 地址也就可能发生改变，也就是它在互联网中的定位发生了变化。</p><p>最后，记住，MAC 地址有一个特殊地址：FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址。</p><h3 id="arp-协议解决了什么问题地位如何" tabindex="-1"><a class="header-anchor" href="#arp-协议解决了什么问题地位如何" aria-hidden="true">#</a> ARP 协议解决了什么问题地位如何？</h3><p>ARP 协议，全称 <strong>地址解析协议（Address Resolution Protocol）</strong>，它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</p><h3 id="arp-协议的工作原理" tabindex="-1"><a class="header-anchor" href="#arp-协议的工作原理" aria-hidden="true">#</a> ARP 协议的工作原理？</h3>',21),D=t("h2",{id:"复习建议",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#复习建议","aria-hidden":"true"},"#"),e(" 复习建议")],-1),L=t("p",null,"非常推荐大家看一下 《图解 HTTP》 这本书，这本书页数不多，但是内容很是充实，不管是用来系统的掌握网络方面的一些知识还是说纯粹为了应付面试都有很大帮助。下面的一些文章只是参考。大二学习这门课程的时候，我们使用的教材是 《计算机网络第七版》（谢希仁编著），不推荐大家看这本教材，书非常厚而且知识偏理论，不确定大家能不能心平气和的读完。",-1);function F(y,E){const r=a("RouterLink"),i=a("ExternalLinkIcon");return h(),c("div",null,[P,p,u,g,t("p",null,[_,e(" ："),o(r,{to:"/cs-basics/network/osi&tcp-ip-model.html"},{default:n(()=>[e("OSI 和 TCP/IP 网络分层模型详解（基础）")]),_:1}),e("。")]),C,t("p",null,[o(r,{to:"/cs-basics/network/application-layer-protocol.html"},{default:n(()=>[e("应用层常见协议总结（应用层）")]),_:1})]),H,t("p",null,[S,e(" ："),o(r,{to:"/cs-basics/network/tcp-connection-and-disconnection.html"},{default:n(()=>[e("TCP 三次握手和四次挥手（传输层）")]),_:1}),e(" 。")]),f,t("p",null,[o(r,{to:"/cs-basics/network/tcp-reliability-guarantee.html"},{default:n(()=>[e("TCP 传输可靠性保障（传输层）")]),_:1})]),b,t("ul",null,[t("li",null,[t("a",m,[e("从输入URL到页面加载发生了什么？"),o(i)])]),t("li",null,[t("a",I,[e("浏览器从输入网址到页面展示的过程"),o(i)])])]),U,x,A,t("p",null,[e("关于 HTTP 状态码更详细的总结，可以看我写的这篇文章："),o(r,{to:"/cs-basics/network/http-status-codes.html"},{default:n(()=>[e("HTTP 常见状态码总结（应用层）")]),_:1}),e("。")]),M,t("p",null,[e("关于 HTTP 和 HTTPS 更详细的对比总结，可以看我写的这篇文章："),o(r,{to:"/cs-basics/network/http&https.html"},{default:n(()=>[e("HTTP vs HTTPS（应用层）")]),_:1}),e(" 。")]),R,t("p",null,[e("关于 HTTP 1.0 和 HTTP 1.1 更详细的对比总结，可以看我写的这篇文章："),o(r,{to:"/cs-basics/network/http1.0&http1.1.html"},{default:n(()=>[e("HTTP 1.0 vs HTTP 1.1（应用层）")]),_:1}),e(" 。")]),k,t("p",null,[o(r,{to:"/cs-basics/network/arp.html"},{default:n(()=>[e("ARP 协议详解(网络层)")]),_:1})]),D,L])}const O=d(T,[["render",F],["__file","other-network-questions.html.vue"]]);export{O as default};
